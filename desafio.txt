1. MODELAGEM DE BANCO RELACIONAL (MySQL)

CREATE TABLE Usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(150) NOT NULL UNIQUE,
    pct_corretagem DECIMAL(5,4) NOT NULL -- Ex: 0.0025 = 0.25%
);

CREATE TABLE Ativos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    codigo VARCHAR(10) NOT NULL UNIQUE,
    nome VARCHAR(100) NOT NULL
);

CREATE TABLE Operacoes (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    ativo_id INT NOT NULL,
    quantidade INT NOT NULL,
    preco_unitario DECIMAL(15,6) NOT NULL,
    tipo_operacao ENUM('C', 'V') NOT NULL, -- Compra/Venda
    corretagem DECIMAL(15,6) NOT NULL,
    data_hora DATETIME NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
    FOREIGN KEY (ativo_id) REFERENCES ativos(id),
    INDEX idx_usuario_ativo_data (usuario_id, ativo_id, data_hora)
);

CREATE TABLE Cotacoes (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    ativo_id INT NOT NULL,
    preco_unitario DECIMAL(15,6) NOT NULL,
    data_hora DATETIME NOT NULL,
    FOREIGN KEY (ativo_id) REFERENCES ativos(id),
    INDEX idx_ativo_data (ativo_id, data_hora)
);

CREATE TABLE Posicoes (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    ativo_id INT NOT NULL,
    quantidade INT NOT NULL,
    preco_medio DECIMAL(15,6) NOT NULL,
    pl DECIMAL(15,6) NOT NULL,
    UNIQUE(usuario_id, ativo_id),
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
    FOREIGN KEY (ativo_id) REFERENCES ativos(id)
);

. Justificativas:
- INT para chaves e identificadores (exceto operações/cotações, que podem crescer muito: BIGINT)
- DECIMAL para valores monetários, com precisão de até 6 casas
- ENUM para tipo de operação por simplicidade e clareza
- Índices para consultas otimizadas em operações e cotações por tempo e chave composta

--------------------------------------------------------

2. ÍNDICES E PERFORMANCE

- Índices já criados acima: (usuario_id, ativo_id, data_hora) na tabela OPERACOES

- Consulta SQL otimizada:
SELECT * FROM operacoes
WHERE usuario_id = @usuario_id
  AND ativo_id = @ativo_id
  AND data_hora >= NOW() - INTERVAL 30 DAY
ORDER BY data_hora DESC;

- Atualização da posição com base em cotação (lógica exemplo):

- Atualiza P&L:
UPDATE posicoes p
JOIN cotacoes c ON p.ativo_id = c.ativo_id
SET p.pl = (c.preco_unitario - p.preco_medio) * p.quantidade
WHERE c.data_hora = (SELECT MAX(c2.data_hora) FROM cotacoes c2 WHERE c2.ativo_id = p.ativo_id);

----------------------------------------------------------------------------

3. APLICAÇÃO

- Estrutura e arquivos são organizados em camadas: Models, Services, Repositories, Program.cs

// Models/Operacao.cs
public class Operacao {
    public long Id { get; set; }
    public int UsuarioId { get; set; }
    public int AtivoId { get; set; }
    public int Quantidade { get; set; }
    public decimal PrecoUnitario { get; set; }
    public string TipoOperacao { get; set; } = string.Empty;
    public decimal Corretagem { get; set; }
    public DateTime DataHora { get; set; }
}

// Services/RelatorioService.cs
public class RelatorioService {
    private readonly IOperacaoRepository _repo;

    public RelatorioService(IOperacaoRepository repo) {
        _repo = repo;
    }

    public async Task<Dictionary<string, decimal>> TotalInvestidoPorAtivoAsync(int usuarioId) {
        var operacoes = await _repo.ObterOperacoesPorUsuario(usuarioId);
        return operacoes
            .Where(o => o.TipoOperacao == "C")
            .GroupBy(o => o.AtivoId)
            .ToDictionary(g => g.Key.ToString(),
                          g => g.Sum(o => o.Quantidade * o.PrecoUnitario + o.Corretagem));
    }
}

// Repository/OperacaoRepository.cs
public class OperacaoRepository : IOperacaoRepository {
    private readonly AppDbContext _context;

    public OperacaoRepository(AppDbContext context) {
        _context = context;
    }

    public async Task<List<Operacao>> ObterOperacoesPorUsuario(int usuarioId) {
        return await _context.Operacoes.Where(o => o.UsuarioId == usuarioId).ToListAsync();
    }
}



----------------------------------------------------------------------------

4. LÓGICA DE NEGÓCIO - PREÇO MÉDIO

public static decimal CalcularPrecoMedio(List<(int Quantidade, decimal Preco)> compras) {
    if (compras == null || !compras.Any() || compras.Any(c => c.Quantidade <= 0 || c.Preco <= 0))
        throw new ArgumentException("Entradas inválidas.");

    var totalQuantidade = compras.Sum(c => c.Quantidade);
    var totalInvestido = compras.Sum(c => c.Quantidade * c.Preco);
    return totalInvestido / totalQuantidade;
}


----------------------------------------------------------------------------


7. INTEGRAÇÃO KAFKA (WORKER SERVICE: RETRY E IDEMPOTÊNCIA)

public class CotacaoConsumer : BackgroundService
{
    private readonly IKafkaConsumer _consumer;
    private readonly IServiceScopeFactory _scopeFactory;
    private const int MaxRetries = 3;
    private readonly TimeSpan InitialDelay = TimeSpan.FromSeconds(2);

    public CotacaoConsumer(IKafkaConsumer consumer, IServiceScopeFactory scopeFactory)
    {
        _consumer = consumer;
        _scopeFactory = scopeFactory;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        await foreach (var message in _consumer.ConsumeAsync(stoppingToken))
        {
            int attempt = 0;
            bool sucesso = false;

            // Retry
            while (attempt < MaxRetries && !sucesso && !stoppingToken.IsCancellationRequested)
            {
                try
                {
                    using var scope = _scopeFactory.CreateScope();
                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();

                    var cotacao = JsonSerializer.Deserialize<Cotacao>(message.Value);
                    if (cotacao == null) break;

                    // Idempotência
                    var existe = await db.Cotacoes
                        .AnyAsync(c => c.AtivoId == cotacao.AtivoId && c.DataHora == cotacao.DataHora, stoppingToken);

                    if (existe) break;

                    db.Cotacoes.Add(cotacao);
                    await db.SaveChangesAsync(stoppingToken);

                    sucesso = true;
                }
                catch (Exception ex)
                {
                    attempt++;
                    if (attempt >= MaxRetries)
                    {
                        // Logar a falha (recomenda-se usar ILogger)
                        Console.WriteLine($"Erro ao salvar cotação após {MaxRetries} tentativas: {ex.Message}");
                        break;
                    }

                    // Delay com backoff
                    var delay = TimeSpan.FromSeconds(Math.Pow(2, attempt));
                    await Task.Delay(delay, stoppingToken);
                }
            }
        }
    }
}
